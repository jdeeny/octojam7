##region Introduction
#
#
# Unnamed Octo Jam 7 Submission
#        October 2020
#
# Appearance
#   Palette (TBD?)
#       Background:     #000000
#       Foreground 1:   #FF00FF
#       Foreground 2:   #00FFFF
#       Blended:        #FFFFFF
#       Buzzer:         #990099
#       Silence:        #330033
#   Font: Fish'N'Chips
# Options
#   Compatibility: None
#   Profile: XO-Chip
#   Screen Rotation: 90
#
##endregion

##region(fold) Constants
:const FRAME_DELAY 2 # 30 FPS

:const MAP_WIDTH 15
:const MAP_HEIGHT 8
:calc MAP_BYTES { MAP_WIDTH * MAP_HEIGHT }
:calc MAP_X_LIMIT { 8 + 7 * MAP_WIDTH }
:calc MAP_Y_LIMIT { 8 + 7 * MAP_HEIGHT }



:const KEYBIND_UP OCTO_KEY_W
:const KEYBIND_DOWN OCTO_KEY_S
:const KEYBIND_LEFT OCTO_KEY_A
:const KEYBIND_RIGHT OCTO_KEY_D


:const ARROW_REPEAT_RATE_MS 100
##endregion

##region(fold) Register Aliases
:alias cx vD
:alias cy vE
##endregion

##region(fold) Math Macros
:macro set-times-6 DEST SRC {
	# dest/src MUST be distinct!
	DEST := SRC  # y
	DEST += DEST # y*2
	DEST += SRC  # y*3
	DEST += DEST # y*6
}

:macro set-times-7 DEST SRC {
	# dest/src MUST be distinct!
	DEST := SRC  # y
	DEST += DEST # y*2
	DEST += SRC  # y*3
	DEST += DEST # y*6
	DEST += SRC  # y*7
}

:macro set-times-16 DEST SRC {
	DEST := SRC
	DEST += DEST
	DEST += DEST
	DEST += DEST
	DEST += DEST
}

# Convert milliseconds to the nearest number of frames (rounds down below 0.5)
:macro calc-frames-from-ms frames ms {
	:calc frames { floor ( ( ( ms / 1000.0 ) / ( FRAME_DELAY / 60 ) ) + 0.5 ) }
}

##endregion

##region(fold) Key Handling
# Convert millisecond repeat times to frames
calc-frames-from-ms ARROW_REPEAT_RATE_FRAMES ARROW_REPEAT_RATE_MS

: key_data
: key_data_arrow_state	0	# arrow debounce time
: key_data_updown		0	# 0 = none, 1 = up, 255 = down
: key_data_leftright	0	# 0 = none, 1 = right, 255 = left
:monitor key_data 3
##endregion

##region Main
: main
	##region(fold) Initialization
	hires	
	##endregion

	##region(fold) Level Setup
	draw-map

	cx := 1
	cy := 2

	draw-cursor
	##endregion

	##region Game Loop
	: game-loop
	    ##region(fold) Framerate Lock Setup
	    vf := FRAME_DELAY
	    delay := vf
		##endregion

		##region(fold) Arrow Key Handler
		# This stores up/down and left/right data in `key_data`
		# Keys are debounced and stored as +/- 1, so other code should be able to use
		# `key_data_updown` and `key_data_leftright` directly
		i := key_data
		load v0 - v2

		v3 := 0
		vF := KEYBIND_DOWN if vF key then v3 += 1
		vF := KEYBIND_UP if vF key then v3 += -1
		v4 := 0
		vF := KEYBIND_RIGHT if vF key then v4 += 1
		vF := KEYBIND_LEFT if vF key then v4 += -1

		# Check for no input
		vF := v4
		vF |= v3
		if vF == 0 then jump arrow_key_handler_null_input

		# Check if the repeat timer is timed out
		if v0 == 0 then jump arrow_key_handler_fresh_input

		# decrement timer
		v0 += -1
		jump arrow_key_handler_ignore_input

		: arrow_key_handler_fresh_input
		v0 := ARROW_REPEAT_RATE_FRAMES
		v1 := v3
		v2 := v4
		jump arrow_key_handler_save


		: arrow_key_handler_null_input
		v0 := 0
		: arrow_key_handler_ignore_input
		v1 := 0
		v2 := 0
		: arrow_key_handler_save
		save v0 - v2
		##endregion



		# Handle the current state
		# trampoline thingy

		# undraw cursor
		draw-cursor

		# move cursor
		i := key_data_updown
		load v1
		cy += v0
		cx += v1

		if cx == 255 then cx := 0
		if cx > MAP_WIDTH then cx := MAP_WIDTH
		if cy == 255 then cy := 0
		if cy > MAP_HEIGHT then cy := MAP_HEIGHT
		draw-cursor

		# check other keys
		v0 := OCTO_KEY_E
		if v0 key begin
			# mess with the map at the cursor position

			# what pixel position?
			set-times-7 v1 cx
			v1 += 1
			set-times-7 v2 cy
			v2 += 1

			# what buffer index?
			set-times-16 v3 cy
			v3 += cx

			# undraw what was there
			i := buffer-world
			i += v3
			load v0
			draw-sprite

			# edit the map and draw the new thing
			i := buffer-world
			i += v3
			if v0 == 255 begin
				v0 := 0
				save v0
			else
				v0 := 255
				save v0
			end
			draw-sprite
		end

    ##region(fold) Framerate Lock Wait
    loop
		vf := delay
		if vf != 0 then
    again
	##endregion

	jump game-loop
	##endregion
##endregion


##region(fold) Drawing
: draw-sprite # draw the sprite with index v0 at position v1,v2
	# 0xFF indicates an empty space
	if v0 == 0xFF then return
	plane 1
	if v0 >= 3 then plane 2
	if v0 >= 4 then plane 3
	set-times-6 v4 v0
	i := sprites
	i += v4
	sprite v1 v2 6
	;

: draw-map
	v3 := 0 # position in buffer
	v2 := 1 # Y
	loop
		v1 := 1 # X
		loop
			i := buffer-world
			i += v3
			load v0
			draw-sprite
			
			v1 += 7
			v3 += 1
			if v1 != MAP_X_LIMIT then
		again
		
		v2 += 7
		if v2 != MAP_Y_LIMIT then
	again
	;

: draw-cursor
	i := cursor
	set-times-7 v1 cx
	set-times-7 v2 cy
	sprite v1 v2 8
	;
##endregion

##region(fold) Game State Data
: buffer-world
	0x02 0x00 0x00 0x00 0x00 0x00 0x02 0x00 0x01 0x00 0x01 0xFF 0xFF 0x00 0x00 0x00
	0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x04 0x01 0xFF 0xFF
	0x01 0xFF 0x00 0x01 0xFF 0x03 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x01 0x01 0xFF 0xFF
	0xFF 0xFF 0xFF 0x00 0xFF 0xFF 0xFF 0x01 0x06 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
	0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0x01 0x01 0x01 0xFF 0xFF
	0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0xFF 0x00 0x02 0x03 0x01 0x01 0xFF 0xFF
	0x02 0x00 0x02 0x00 0x00 0x00 0x02 0x00 0x01 0x00 0x01 0x03 0xFF 0x00 0x00 0x00
	0x01 0xFF 0x04 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x01 0x01 0xFF 0xFF
	0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x01 0x01 0xFF 0xFF

:monitor buffer-world MAP_BYTES
##endregion

##region(fold) Sprite Data
: cursor
	0xFF 0x81 0x81 0x81 0x81 0x81 0x81 0xFF

: sprites
	0x7C 0xF8 0xFC 0xF8 0xF4 0xA8 # 00 stone
	0x40 0xE8 0x40 0x08 0x5C 0x08 # 01 sparkle
	0x30 0x30 0xFC 0xFC 0x30 0x30 # 02 plus
	0x78 0xB4 0xFC 0x00 0x30 0x48 # 03 mr. mushroom
	0xE0 0xA8 0xE0 0x1C 0x54 0x1C # 04 miner
	0xE0 0xE0 0xE0 0x1C 0x1C 0x1C
	0xFC 0x48 0x78 0x48 0x78 0x48 # 06 tower
	0xFC 0x78 0x78 0x78 0x78 0x48
##endregion
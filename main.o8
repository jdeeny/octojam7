##region Introduction
#
#
# Unnamed Octo Jam 7 Submission
#        October 2020
#
# Appearance
#   Palette (TBD?)
#       Background:     #000000
#       Foreground 1:   #FF00FF
#       Foreground 2:   #00FFFF
#       Blended:        #FFFFFF
#       Buzzer:         #990099
#       Silence:        #330033
#   Font: Fish'N'Chips
# Options
#   Compatibility: None
#   Profile: XO-Chip
#   Screen Rotation: 90
#
##endregion

##region Macros and Constants ######################################################################
	##region(fold) Configuration and Constants

	# Keybinds
	:const KEYBIND_UP OCTO_KEY_W
	:const KEYBIND_DOWN OCTO_KEY_S
	:const KEYBIND_LEFT OCTO_KEY_A
	:const KEYBIND_RIGHT OCTO_KEY_D

	:const ARROW_REPEAT_RATE_MS 100		# Repeat rate for arrow keys in milliseconds

	# Gameloop
	:const FRAME_DELAY 2 # 30 FPS

	# Level Config
	:const MAP_WIDTH 15
	:const MAP_HEIGHT 8
	:calc MAP_BYTES { MAP_WIDTH * MAP_HEIGHT }
	:calc MAP_X_LIMIT { 8 + 7 * MAP_WIDTH }
	:calc MAP_Y_LIMIT { 8 + 7 * MAP_HEIGHT }


	# Font Config
	:const GLYPH_HEIGHT 8

	# Stack Config
	:const SEG_STACK_START 0xFE00
	:const SEG_STACK_END 0xFEFF
	##endregion

	##region(fold) Global Register Aliases
	:alias SP vC	# Stack Pointer
	:alias cx vD
	:alias cy vE
	##endregion

	##region(fold) Math Macros
	:macro set-times-6 DEST SRC {
		# dest/src MUST be distinct!
		DEST := SRC  # y
		DEST += DEST # y*2
		DEST += SRC  # y*3
		DEST += DEST # y*6
	}

	:macro set-times-7 DEST SRC {
		# dest/src MUST be distinct!
		DEST := SRC  # y
		DEST += DEST # y*2
		DEST += SRC  # y*3
		DEST += DEST # y*6
		DEST += SRC  # y*7
	}

	:macro set-times-16 DEST SRC {
		DEST := SRC
		DEST += DEST
		DEST += DEST
		DEST += DEST
		DEST += DEST
	}


	:macro math_add_u16_u8 outreg_hi outreg_lo inreg_lo {
		outreg_lo += inreg_lo
		outreg_hi += vF
	}


	# split 16-bit literal into two 8-bit literals `hi` and `lo`
	:macro hilo value { :calc hi { value >> 8 } :calc lo { value & 0xFF } }

	# Emit a 16-bit value into code
	:macro tobytes value { hilo value :byte hi :byte lo }

	# Emit a jump instruction to a given address
	:macro emit-jump addr { :calc _jump_inst { addr | 0x1000 } tobytes _jump_inst }

	# Convert milliseconds to the nearest number of frames (rounds down below 0.5)
	:macro calc-frames-from-ms frames ms {
		:calc frames { floor ( ( ( ms / 1000.0 ) / ( FRAME_DELAY / 60 ) ) + 0.5 ) }
	}



	##endregion

	
	##region(fold) Key Handling
	# Convert millisecond repeat times to frames
	calc-frames-from-ms ARROW_REPEAT_RATE_FRAMES ARROW_REPEAT_RATE_MS

	: key_data
	: key_data_arrow_state	0	# arrow debounce time
	: key_data_updown		0	# 0 = none, 1 = up, 255 = down
	: key_data_leftright	0	# 0 = none, 1 = right, 255 = left
	:monitor key_data 3
	##endregion
##endregion Macros and Constants

##region Code and Near Data ########################################################################
	##region Main [Should be the first non-macro thing to save 2 bytes]
	: main
		# One-time Initialization
		hires
		plane 3
		state-set-splash

		##region Game Loop
		: game-loop
			##region(fold) Framerate Lock Setup
			vf := FRAME_DELAY
			delay := vf
			##endregion

			##region(fold) Arrow Key Handler
			# This stores up/down and left/right data in `key_data`
			# Keys are debounced and stored as +/- 1, so other code should be able to use
			# `key_data_updown` and `key_data_leftright` directly
			i := key_data
			load v0 - v2

			v3 := 0
			vF := KEYBIND_DOWN if vF key then v3 += 1
			vF := KEYBIND_UP if vF key then v3 += -1
			v4 := 0
			vF := KEYBIND_RIGHT if vF key then v4 += 1
			vF := KEYBIND_LEFT if vF key then v4 += -1

			# Check for no input
			vF := v4
			vF |= v3
			if vF == 0 then jump arrow_key_handler_null_input

			# Check if the repeat timer is timed out
			if v0 == 0 then jump arrow_key_handler_fresh_input

			# decrement timer
			v0 += -1
			jump arrow_key_handler_ignore_input

			: arrow_key_handler_fresh_input
			v0 := ARROW_REPEAT_RATE_FRAMES
			v1 := v3
			v2 := v4
			jump arrow_key_handler_save


			: arrow_key_handler_null_input
			v0 := 0
			: arrow_key_handler_ignore_input
			v1 := 0
			v2 := 0
			: arrow_key_handler_save
			save v0 - v2
			##endregion

			# Gamestate Handler
			# The following jump is overwritten with a jump to the current state
			: state-handler-target jump state-handler-splash
			: state-handler-return

		##region(fold) Framerate Lock Wait
		loop
			vf := delay
			if vf != 0 then
		again
		##endregion

		jump game-loop
		##endregion
	##endregion

	##region(fold) Data Stack

	# stack-init		Initializes the stack by setting SP to 0
	# push	vx vy		Save vx - vy to the stack, destroys I, increments SP
	# pop vx vy			Load vx - vy from the stack, destroys I, decrements SP
	# peek vx vy		Load vx - vy from the stack without changing SP, destroys I
	# drop n			Drops n bytes from the stack, decrements SP
	#
	###

	:calc stack_code_begins { HERE }
	# Define the Stack Segment
	:org SEG_STACK_START
	: stack_start
	:org SEG_STACK_END
	: stack_end
	:org stack_code_begins

	:calc STACK_SIZE { ( SEG_STACK_END - SEG_STACK_START ) + 1 }
	: stack-init SP := 0 ;
	:calc STACK_SIZE { ( SEG_STACK_END - SEG_STACK_START ) + 1 }
	:assert "Stack must be <= 256 bytes" { STACK_SIZE <= 256 }

	:macro _stack_reg firstreg lastreg {
		:assert "firstreg must be <= lastreg" { firstreg <= lastreg }
		:calc _stack_bytes { ( lastreg - firstreg ) + 1 }
		:calc _stack_decr { 0 - _stack_bytes }
	}

	:macro _stack_load_i {
		i := long stack_start
		i += SP
	}

	#:macro push firstreg lastreg bytes { stack_push SP mm_load_sp firstreg lastreg bytes }
	:macro push firstreg lastreg {
		_stack_reg firstreg lastreg
		:check "peek: stack overflow" { ( _stack_bytes + SP ) > STACK_SIZE }
		_stack_load_i
		save firstreg - lastreg
		SP += _stack_bytes
	}
	#:macro pop firstreg lastreg bytes { stack_pop SP mm_load_sp firstreg lastreg bytes }
	:macro pop firstreg lastreg {
		_stack_reg firstreg lastreg
		:check "pop: stack underflow" { _stack_bytes > SP }
		SP += _stack_decr
		_stack_load_i
		load firstreg - lastreg
	}
	#:macro stackpeek firstreg lastreg bytes { stack_peek SP mm_load_sp firstreg lastreg bytes }
	:macro peek firstreg lastreg {
		_stack_reg firstreg lastreg
		:check "peek: stack underflow" { _stack_bytes > SP }
		SP += _stack_decr
		_stack_load_i
		load firstreg - lastreg
		SP += _stack_bytes
	}
	#:macro stackdrop bytes { stack_drop SP bytes }
	:macro drop firstreg lastreg {
		_stack_reg firstreg lastreg
		:check "drop: stack underflow" { _stack_bytes > SP }
		SP += _stack_decr
	}




	##endregion


	##region(fold) Utility Functions
	##region(fold) Set I = address in registers
		# `reg-set-i-macro` creates a self modifying function that builds an `I = long v0 v1` instruction
		:macro _reg-set-i-macro reg-hi reg-lo target { i := target save reg-hi - reg-lo 0xF0 0x00 : target 0x00 0x00 ; }

		: reg-set-i-v01 _reg-set-i-macro v0 v1 reg_set_i_v01_target		# This is the instantiated function `reg_set_i_v01`
		: reg-set-i-v23 _reg-set-i-macro v2 v3 reg_set_i_v23_target		# Uncomment for a version that operates on v23
	##endregion
##endregion

	##region(fold) Drawing
	: draw-sprite # draw the sprite with index v0 at position v1,v2
		# 0xFF indicates an empty space
		if v0 == 0xFF then return
		plane 1
		if v0 >= 3 then plane 2
		if v0 >= 4 then plane 3
		set-times-6 v4 v0
		i := tiles
		i += v4
		sprite v1 v2 6
		;

	: draw-map
		v3 := 0 # position in buffer
		v2 := 1 # Y
		loop
			v1 := 1 # X
			loop
				i := buffer-world
				i += v3
				load v0
				draw-sprite
				
				v1 += 7
				v3 += 1
				if v1 != MAP_X_LIMIT then
			again
			
			v2 += 7
			if v2 != MAP_Y_LIMIT then
		again
		;

	: draw-cursor
		i := cursor
		set-times-7 v1 cx
		set-times-7 v2 cy
		sprite v1 v2 8
		;
	##endregion

	##region(fold) Game State Data
	: buffer-world
		0x02 0x00 0x00 0x00 0x00 0x00 0x02 0x00 0x01 0x00 0x01 0xFF 0xFF 0x00 0x00 0x00
		0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x04 0x01 0xFF 0xFF
		0x01 0xFF 0x00 0x01 0xFF 0x03 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x01 0x01 0xFF 0xFF
		0xFF 0xFF 0xFF 0x00 0xFF 0xFF 0xFF 0x01 0x06 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
		0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0x01 0x01 0x01 0xFF 0xFF
		0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0xFF 0x00 0x02 0x03 0x01 0x01 0xFF 0xFF
		0x02 0x00 0x02 0x00 0x00 0x00 0x02 0x00 0x01 0x00 0x01 0x03 0xFF 0x00 0x00 0x00
		0x01 0xFF 0x04 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x01 0x01 0xFF 0xFF
		0x01 0xFF 0x00 0x01 0xFF 0xFF 0xFF 0xFF 0x02 0x00 0x02 0xFF 0x01 0x01 0xFF 0xFF

	:monitor buffer-world MAP_BYTES
	##endregion

	##region(fold) Screens and Strings

	# A `String` represents a sequence of commands to process. A selectable processing kernel
	# is used to consume bytes from the string. A special sigil value (0x00) indicates an escaped
	# meta-command that can change kernels, output location, etc.
	#
	# Each string consists of a preamble, body, and end.
	#
	# [ Preamble (4B) | Body (nB) | End (2B) ]
	#
	# The `preamble` contains a jump instruction to the kernel to use and the address of the string
	# data. This is loaded at the start of string processing.
	#
	# The `body` contains a sequence of 2-byte addresses to be consumed by the kernel. The escape
	# sigil value of 0 was chosen because it should not conflict with any address in far data.
	#
	# The required `end` portion of the string is the 2-byte END escape sequence, which halts string processing.
	#
	# There are three processing kernels:
	#	sprite8		Display 8x8 sprites, advances `x` 8px
	#	sprite16	Display 16x16 sprites, advances `x` 16px
	#	text		Display text glyphs, advances `x` proportionally (amount is stored before the sprite)
	#
	# Escapes:
	#	END			Stop string processing (2 bytes)
	#	LOC			Locate to the a given x, y position (4 bytes)
	#	MODE		Set the processing kernel (4 bytes)
	#
	#
	# Possible changes / improvements:
	# 	- Add a way to do line wrapping
	#	- Add a way to do substrings, possibly as another mode. If we restrict to one level it shouldn't
	#		take too much

	# Sigil value used to indicate the following byte(s) are interpreted as a command
	:const STR_ESC 0


	# Register setup
	# 	v2v3	address of string data
	# 	v4		screen x coord
	# 	v5	 	screen y coord
	#
	# When loading string initially
	# 	v0v1	address of kernel
	#

	:alias str_x v4
	:alias str_y v5
	:macro str-display name {
		:calc _str_address
	}

	: str-process		# Process (display) a string at I
	# Parameters:
	#	I		address of the string
	#	v4		screen x coord (optional if location set in the string)
	#	v5		screen y coord (optional if location set in string)
	###

	# Load the preamble (v0v1 = kernel, v2v3 = string data)
	load v0 - v3

	# Set the processing kernel
	i := str_process_kernel_jump_target
	save v0 - v1

	: str-process-continue		# Continue processing an in-progress string
		# Load the next 2 bytes of the string, advancing I by 2
		reg-set-i-v23
		load v1


		# If this is not an escape then jump to the processing kernel
		# The target is is changed on the fly by the strings
		if v0 != STR_ESC then : str_process_kernel_jump_target jump str-kernel-sprite8

		# This is an escape, use the 2nd byte to jump into the table
		: str-process-is-escape
		v0 := v1
		jump0 str_escape_table

		# String escape jump table
		: str_escape_table
		:calc STR_ESC_TABLE { HERE }
			# STR_END: Marks the end of the string
				: str_esc_end :calc STR_END { HERE - STR_ESC_TABLE } :assert "Table too large" { HERE - STR_ESC_TABLE <= 255 }
					return	# This returns to the function that called str-process
			# STR_LOC: Sets the location to next two bytes in the string
				: str_esc_loc :calc STR_LOC { HERE - STR_ESC_TABLE } :assert "Table too large" { HERE - STR_ESC_TABLE <= 255 }
					# Load the bytes directly into the x/y coords
					load str_x - str_y
					v0 := 4		# Advance 4 bytes
					jump str-process-escape-next
			# STR_MODE: Sets the mode to the address in the next two bytes
				: str_mode :calc STR_MODE { HERE - STR_ESC_TABLE } :assert "Table too large" { HERE - STR_ESC_TABLE <= 255 }
					# An instruction that jumps to the correct kernel is stored directly in the string so it can just be copied
					load v0 - v1
					i := str_process_kernel_jump_target
					save v0 - v1
					v0 := 4		# Advance 4 bytes
					jump str-process-escape-next
				: str_call  :calc STR_MODE { HERE - STR_ESC_TABLE } :assert "Table too large" { HERE - STR_ESC_TABLE <= 255 }
					jump str-process-escape-next

		# processing kernels return here
		: str-process-next			# Kernels return here and 2 bytes are always consumed
			v0 := 2
		: str-process-escape-next	# Escapes return here with a variable number of bytes consumed
		math_add_u16_u8 v2 v3 v0	# v23 += v0

		jump str-process-continue



	# String processing kernels
	#
	# These process non-escaped parts of strings 2 bytes at a time
	#		- When the kernel is jumped into:
	#			- v0-v1 contain 2 bytes from the string and I = next string data
	#			- v2v3 still points to the location the current bytes came from
	# 		- Return to `str-process-next` when done if consuming 2 bytes. If some other number is
	#			consumed, you can set v0 and jump to str-process-escape-next

	# Display an 8x8 sprite at str_x, str_y. Advance str_x by 8 pixels.
	: str-kernel-sprite8
		reg-set-i-v01						# Set I to the location of the sprite
		sprite str_x str_y 8
		str_x += 8
		jump str-process-next

	# Display a 16x16 sprite at str_x, str_y. Advance str_x by 16 pixels.
	: str-kernel-sprite16
		reg-set-i-v01						# Set I to the location of the sprite
		sprite str_x str_y 0
		str_x += 16
		jump str-process-next

	# Display a variable width 8px tall glyph sprite at str_x, str_y.
	# A byte stored immediately before the sprite data is used to advance str_x.
	: str-kernel-text
		reg-set-i-v01						# Set I to the location of the width and sprite data
		load v0								# v0 := width, I := sprite data
		sprite str_x str_y GLYPH_HEIGHT
		str_x += v0
		jump str-process-next

	# Macros for creating strings
		:macro def-string mode {
			:calc _after_this { HERE + 4 }
			emit-jump mode
			tobytes _after_this
		}
		# Emits an escape and the END offset
		:macro S_END { :byte STR_ESC :byte STR_END }
		# Emits an escape, the LOC offset, and the x/y data
		:macro S_LOC x y { :byte STR_ESC :byte STR_LOC :byte x :byte y }
		# Emites an escape, the MODE offset, and an jump instruction to the appropriate kernel
		:macro S_MODE_SPR8 { :byte STR_ESC :byte STR_MODE emit-jump str-kernel-sprite8 }
		:macro S_MODE_SPR16 { :byte STR_ESC :byte STR_MODE emit-jump str-kernel-sprite16 }
		:macro S_MODE_TEXT { :byte STR_ESC :byte STR_MODE emit-jump str-kernel-text }



	##endregion

	##region(fold) State Handlers
	:macro set-state-handler handler { :calc _jump_inst { handler | 0x1000 } hilo _jump_inst v0 := hi v1 := lo i := state-handler-target save v0 - v1 }

	: state-handler-splash
		v0 := 0 if v0 key then state-set-title
		jump state-handler-return

	: state-set-splash
		# Set the handler
		set-state-handler state-handler-splash

		# Do things that happen once when switching
		clear
		i := long str_screenborder
		str-process

		i := long str_test_text
		str-process
		;


	: state-handler-title
		v0 := 0 if v0 key then state-set-gameplay
		jump state-handler-return

	: state-set-title
		# Set the handler
		set-state-handler state-handler-title

		# Do things that happen once when switching
		clear
		i := long str_screenborder
		str-process

		i := long str_test_text
		str-process
		;

	: state-handler-credits
		v0 := 0 if v0 key then state-set-title
		jump state-handler-return

	: state-set-credits
		# Set the handler
		set-state-handler state-handler-credits

		# Do things that happen once when switching
		clear
		i := long str_screenborder
		str-process

		i := long str_test_text
		str-process
		;

	: state-handler-menu
		v0 := 0 if v0 key then state-set-gameplay
		jump state-handler-return

	: state-set-menu
		# Set the handler
		set-state-handler state-handler-menu

		# Do things that happen once when switching
		clear
		i := long str_screenborder
		str-process

		i := long str_test_text
		str-process
		;

	: state-handler-toolbox
		v0 := 0 if v0 key then state-set-gameplay
		jump state-handler-return

	: state-set-toolbox
		# Set the handler
		set-state-handler state-handler-toolbox

		# Do things that happen once when switching
		clear
		i := long str_screenborder
		str-process

		i := long str_test_text
		str-process
		;




	: state-handler-gameplay
		# undraw cursor
		draw-cursor

		# move cursor
		i := key_data_updown
		load v1
		cy += v0
		cx += v1

		if cx == 255 then cx := 0
		if cx > MAP_WIDTH then cx := MAP_WIDTH
		if cy == 255 then cy := 0
		if cy > MAP_HEIGHT then cy := MAP_HEIGHT
		draw-cursor

		# check other keys
		v0 := OCTO_KEY_E
		if v0 key begin
			# mess with the map at the cursor position

			# what pixel position?
			set-times-7 v1 cx
			v1 += 1
			set-times-7 v2 cy
			v2 += 1

			# what buffer index?
			set-times-16 v3 cy
			v3 += cx

			# undraw what was there
			i := buffer-world
			i += v3
			load v0
			draw-sprite

			# edit the map and draw the new thing
			i := buffer-world
			i += v3
			if v0 == 255 begin
				v0 := 0
				save v0
			else
				v0 := 255
				save v0
			end
			draw-sprite
		end
		jump state-handler-return


	: state-set-gameplay
		# Set the handler
		set-state-handler state-handler-gameplay

		# Do things that happen once when switching
		clear
		draw-map
		cx := 1
		cy := 2
		draw-cursor
		;

	##endregion

	##region Components
	# A component defines data to be held by an entity
	# eg Position x y
	#	 Position16 x1 x2 y1 y2
	#	 Velocity16 x1 x2 y1 y2
	##endregion

	##region Systems

	# A system operates on a series of entities
	#
	# Need to find the appropriate entities
	# Need to access the required data (components)

	##endregion

##endregion Code and Near Data

##region Far Data [Expected to require `long` access] ##############################################
	: far_data_begins
	##region(fold) Tile Data
	: cursor
		0xFF 0x81 0x81 0x81 0x81 0x81 0x81 0xFF

	: tiles
		0x7C 0xF8 0xFC 0xF8 0xF4 0xA8 # 00 stone
		0x40 0xE8 0x40 0x08 0x5C 0x08 # 01 sparkle
		0x30 0x30 0xFC 0xFC 0x30 0x30 # 02 plus
		0x78 0xB4 0xFC 0x00 0x30 0x48 # 03 mr. mushroom
		0xE0 0xA8 0xE0 0x1C 0x54 0x1C # 04 miner
		0xE0 0xE0 0xE0 0x1C 0x1C 0x1C
		0xFC 0x48 0x78 0x48 0x78 0x48 # 06 tower
		0xFC 0x78 0x78 0x78 0x78 0x48
	##endregion

	##region(fold) Sprite8 Data
	: sprite8_data
		:calc sprite8_count { 0 }
		:macro def-sprite8 name { :assert "SPRITE8: Size / Data Mismatch" { ( sprite8_count * 16 ) == HERE - sprite8_data } :calc name { sprite8_count } :calc sprite8_count { sprite8_count + 1 } }
		def-sprite8 spr8_test1
			0xCC 0xCC 0x00 0x00 0xC0 0xC0 0x03 0x03
			0x3C 0x3C 0xC0 0xC0 0xC0 0xC0 0x03 0x03

		def-sprite8 spr8_test2
			0x55 0xAA 0x00 0x00 0x55 0xAA 0x00 0x00
			0x00 0x00 0x55 0xAA 0x55 0xAA 0x00 0x00
	##endregion

	##region(fold) Sprite16 Data
	: sprite16_data
		:calc sprite16_count { 0 }
		:macro def-sprite16 name { :assert "SPRITE16: Size / Data Mismatch" { ( sprite16_count * 64 ) == HERE - sprite16_data } :calc name { ( sprite16_count * 64 ) + sprite16_data } :calc sprite16_count { sprite16_count + 1 } }
		def-sprite16 spr16_test1 0x80 0x01 0xC0 0xE1 0x61 0xF3 0x31 0xF2 0x08 0x06 0x04 0x0C 0x02 0x18 0x03 0x30 0x01 0xE0 0x01 0xC0 0x03 0x60 0x02 0x30 0x04 0x1C 0x39 0xC4 0x61 0xC2 0xC0 0x03 0x00 0x00 0x00 0xE0 0x01 0xF0 0x01 0xF0 0x00 0x00 0x00 0x00 0x00 0x00 0x70 0x00 0x70 0x07 0x70 0x07 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0xC0 0x01 0xC0 0x00 0x00
		def-sprite16 spr16_test2 0xF0 0x00 0xF7 0xF8 0xF7 0xA8 0x00 0xA8 0x00 0xA8 0x00 0xA8 0x07 0xA8 0x07 0xF8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 0xFF 0xFF 0x00 0x00 0x07 0xF8 0x07 0xA8 0x0F 0xA8 0x0F 0xA8 0x0F 0xA8 0x07 0xA8 0x07 0xF8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF
		def-sprite16 spr16_border_h 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 0x00 0x00 0x00 0x00 0xFF 0xFF 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
		def-sprite16 spr16_border_v 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
		def-sprite16 spr16_border_c 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0xFE 0x7F 0x00 0x00 0x00 0x00 0xFE 0x7F 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x02 0x40 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0 0x07 0xE0
		def-sprite16 spr16_square_waves 0x00 0x00 0x00 0x00 0x00 0x00 0x03 0x3C 0x01 0x24 0x01 0x24 0x01 0x24 0x01 0x24 0xA1 0x24 0xE9 0x24 0x69 0x24 0x79 0x24 0x39 0xE7 0x08 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x08 0x00 0x08 0x00 0x38 0x00 0x78 0x00 0x68 0x00 0xE8 0x00 0xE8 0x00 0xE8 0x00 0xE8 0x00 0x68 0x00 0x78 0x00 0x38 0x00 0x08 0x00 0x08 0x00 0x00 0x00
	##endregion

	##region(fold) Font Data
    :calc GLYPH_MAX_WIDTH { 8 }         # Require that glyphs be this width or less
	:calc glyph_count { 0 }

	:macro def-glyph-manual-width name letter width r1 r2 r3 r4 r5 r6 r7 r8 {
		:assert "Glyph: Size / Data Mismatch" { ( glyph_count * ( ( GLYPH_HEIGHT * 2 ) + 1 ) ) == ( HERE - glyph_data ) }
		:calc name { HERE }
		:stringmode Text letter {
			tobytes name
		}
		:stringmode _Text-Width letter { :calc _str_width { _str_width + @ name } }
		:calc glyph_count { glyph_count + 1 }
        :assert "Glyph too wide" { _glyph_width <= GLYPH_MAX_WIDTH }
		:byte _glyph_width :byte r1 :byte r2 :byte r3 :byte r4 :byte r5 :byte r6 :byte r7 :byte r8 :byte r1 :byte r2 :byte r3 :byte r4 :byte r5 :byte r6 :byte r7 :byte r8
	}

	:macro def-glyph name letter r1 r2 r3 r4 r5 r6 r7 r8 {
		:calc _glyph_composite { r1 | r2 | r3 | r4 | r5 | r6 | r7 | r8 }
        :calc _glyph_width { 9 - ( log _glyph_composite & - _glyph_composite ) / log 2 }    # Magic formula from IJ
		def-glyph-manual-width name letter _glyph_width r1 r2 r3 r4 r5 r6 r7 r8
	}

	:macro _calc-text-width output string {
		:calc _str_width { 0 }
		_Text-Width string
		:calc output { _str_width }
	}

	:macro _calc-text-center output width string {
		_calc-text-width _str_width string
		:calc output { floor ( ( ( width - _str_width ) + 0.5 ) / 2 ) }
	}

	:macro _calc-text-center-between output left right string {
		:calc _delta { right - left }
		_calc-text-center output _delta string
		:calc output { output + left }
	}

	:macro Text-Centered y string {
		_calc-text-center _str_x 128 string
		S_LOC _str_x y
		Text string
	}

	:macro Text-Centered-Between left right y string {
		_calc-text-center-between _str_x left right string
		S_LOC _str_x y
		Text string
	}


	: glyph_data
	def-glyph glyph_A "A" 0x40 0xA0 0xA0 0xE0 0xA0 0xA0 0xA0 0x00
	def-glyph glyph_B "B" 0xC0 0xA0 0xA0 0xC0 0xA0 0xA0 0xC0 0x00
	def-glyph glyph_C "C" 0xE0 0x80 0x80 0x80 0x80 0x80 0xE0 0x00
	def-glyph glyph_D "D" 0xC0 0xA0 0xA0 0xA0 0xA0 0xA0 0xC0 0x00
	def-glyph glyph_E "E" 0xE0 0x80 0x80 0xC0 0x80 0x80 0xE0 0x00
	def-glyph glyph_F "F" 0xE0 0x80 0x80 0xC0 0x80 0x80 0x80 0x00
	def-glyph glyph_G "G" 0xE0 0x80 0x80 0x80 0xA0 0xA0 0xE0 0x00
	def-glyph glyph_H "H" 0xA0 0xA0 0xA0 0xE0 0xA0 0xA0 0xA0 0x00
	def-glyph glyph_I "I" 0xE0 0x40 0x40 0x40 0x40 0x40 0xE0 0x00
	def-glyph glyph_J "J" 0xE0 0x20 0x20 0x20 0x20 0xA0 0xE0 0x00
	def-glyph glyph_K "K" 0xA0 0xA0 0xA0 0xC0 0xA0 0xA0 0xA0 0x00
	def-glyph glyph_L "L" 0x80 0x80 0x80 0x80 0x80 0x80 0xE0 0x00
	def-glyph glyph_M "M" 0xF8 0xA8 0xA8 0xA8 0xA8 0xA8 0xA8 0x00
	def-glyph glyph_N "N" 0x90 0x90 0xD0 0xF0 0xB0 0x90 0x90 0x00
	def-glyph glyph_O "O" 0x60 0x90 0x90 0x90 0x90 0x90 0x60 0x00
	def-glyph glyph_P "P" 0xE0 0x90 0x90 0xE0 0x80 0x80 0x80 0x00
	def-glyph glyph_Q "Q" 0x60 0x90 0x90 0x90 0x90 0xA0 0x50 0x00
	def-glyph glyph_R "R" 0xE0 0x90 0x90 0xE0 0x90 0x90 0x90 0x00
	def-glyph glyph_S "S" 0xF0 0x90 0x80 0xF0 0x10 0x90 0xF0 0x00
	def-glyph glyph_T "T" 0xE0 0x40 0x40 0x40 0x40 0x40 0x40 0x00
	def-glyph glyph_U "U" 0xA0 0xA0 0xA0 0xA0 0xA0 0xA0 0xE0 0x00
	def-glyph glyph_V "V" 0xA0 0xA0 0xA0 0xA0 0xA0 0xA0 0x40 0x00
	def-glyph glyph_W "W" 0xA8 0xA8 0xA8 0xA8 0xA8 0xA8 0xF8 0x00
	def-glyph glyph_X "X" 0xA0 0xA0 0xA0 0x40 0x40 0xA0 0xA0 0x00
	def-glyph glyph_Y "Y" 0xA0 0xA0 0xA0 0x40 0x40 0x40 0x40 0x00
	def-glyph glyph_Z "Z" 0xE0 0x20 0x40 0x40 0x40 0x80 0xE0 0x00
	def-glyph glyph_a "a" 0x00 0x00 0x00 0x40 0xA0 0xA0 0x60 0x00
	def-glyph glyph_b "b" 0x80 0x80 0x80 0xC0 0xA0 0xA0 0xC0 0x00
	def-glyph glyph_c "c" 0x00 0x00 0x00 0x60 0x80 0x80 0x60 0x00
	def-glyph glyph_d "d" 0x20 0x20 0x20 0x60 0xA0 0xA0 0x60 0x00
	def-glyph glyph_e "e" 0x00 0x00 0x00 0xC0 0xC0 0x80 0xC0 0x00
	def-glyph glyph_f "f" 0x40 0xA0 0x80 0xC0 0x80 0x80 0x80 0x00
	def-glyph glyph_g "g" 0x00 0x00 0x40 0xA0 0xA0 0x60 0x20 0x40
	def-glyph glyph_h "h" 0x80 0x80 0x80 0xC0 0xA0 0xA0 0xA0 0x00
	def-glyph glyph_i "i" 0x00 0x00 0x80 0x00 0x80 0x80 0x80 0x00
	def-glyph glyph_j "j" 0x00 0x00 0x40 0x00 0x40 0x40 0x40 0x80
	def-glyph glyph_k "k" 0x80 0x80 0xA0 0xC0 0xC0 0xA0 0xA0 0x00
	def-glyph glyph_l "l" 0x80 0x80 0x80 0x80 0x80 0x80 0x40 0x00
	def-glyph glyph_m "m" 0x00 0x00 0x00 0x00 0x50 0xA8 0x88 0x00
	def-glyph glyph_n "n" 0x00 0x00 0x00 0xE0 0xA0 0xA0 0xA0 0x00
	def-glyph glyph_o "o" 0x00 0x00 0x00 0x40 0xA0 0xA0 0x40 0x00
	def-glyph glyph_p "p" 0x00 0x00 0x40 0xA0 0xC0 0x80 0x80 0x00
	def-glyph glyph_q "q" 0x00 0x00 0x40 0xA0 0x60 0x20 0x30 0x20
	def-glyph glyph_r "r" 0x00 0x00 0x00 0x40 0x80 0x80 0x80 0x00
	def-glyph glyph_s "s" 0x00 0x00 0x40 0x80 0xC0 0x40 0x80 0x00
	def-glyph glyph_t "t" 0x00 0x00 0x80 0xC0 0x80 0x80 0x40 0x00
	def-glyph glyph_u "u" 0x00 0x00 0x00 0xA0 0xA0 0xA0 0xE0 0x00
	def-glyph glyph_v "v" 0x00 0x00 0x00 0xA0 0xA0 0xA0 0x40 0x00
	def-glyph glyph_w "w" 0x00 0x00 0x00 0x88 0xA8 0xA8 0x50 0x00
	def-glyph glyph_x "x" 0x00 0x00 0x00 0x00 0xA0 0x40 0xA0 0x00
	def-glyph glyph_y "y" 0x00 0x00 0x00 0xA0 0xA0 0x40 0x40 0x80
	def-glyph glyph_z "z" 0x00 0x00 0xE0 0x20 0x40 0x80 0xE0 0x00
	def-glyph glyph_. "." 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00
	def-glyph glyph_, "," 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x80
	def-glyph glyph_! "!" 0x80 0x80 0x80 0x80 0x80 0x00 0x80 0x00
	def-glyph-manual-width glyph_space " " 2 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00

	##endregion

	##region(fold) String Data

	: string_data
	: str_screenborder
		def-string str-kernel-sprite16
		S_LOC 248 248
		tobytes spr16_border_c
		tobytes spr16_border_h
		tobytes spr16_border_h
		tobytes spr16_border_h
		tobytes spr16_border_h
		tobytes spr16_border_h
		tobytes spr16_border_h
		tobytes spr16_border_h
		S_LOC 248 8
		tobytes  spr16_border_v
		S_LOC 248 24
		tobytes spr16_border_v
		S_LOC 248 40
		tobytes spr16_border_v
		S_END

	: str_test_text
	def-string str-kernel-text
		Text-Centered 10 "WARNING!"
		Text-Centered 20 "This program makes use of sound."
		Text-Centered 30 "Octo sound is very loud, turn down"
		Text-Centered 40 "your audio output now."
		Text-Centered 50 "Press Enter to continue"
		S_MODE_SPR16
		S_LOC 24 5
		tobytes spr16_square_waves
		S_LOC 84 5
		tobytes spr16_square_waves
		S_END

	##endregion


# Some monitor fun


:calc _code_size { far_data_begins - 0x200 }
:calc _code_free { ( 0x1000 - 0x200 ) - _code_size }
:calc _data_size { HERE - far_data_begins }
:calc _free_size { 0xFFFF - HERE }


:macro monitor-u16 name value { : name tobytes value :monitor name 2 }

monitor-u16 code_size _code_size
monitor-u16 code_free _code_free
monitor-u16 data_size _data_size
monitor-u16 free_size _free_size

##endregion Far Data